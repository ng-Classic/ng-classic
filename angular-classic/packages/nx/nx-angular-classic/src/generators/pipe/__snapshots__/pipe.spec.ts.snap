// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`pipe generator should export the pipe correctly when flat=false and path is nested deeper 1`] = `
"import { Pipe, PipeTransform } from '@angular-classic/core';

@Pipe({
  name: 'test',
})
export class TestPipe implements PipeTransform {
  transform(value: unknown, ...args: unknown[]): unknown {
    return null;
  }
}
"
`;

exports[`pipe generator should export the pipe correctly when flat=false and path is nested deeper 2`] = `
"import { TestPipe } from './test.pipe';

describe('TestPipe', () => {
  it('create an instance', () => {
    const pipe = new TestPipe();
    expect(pipe).toBeTruthy();
  });
});
"
`;

exports[`pipe generator should export the pipe correctly when flat=false and path is nested deeper 3`] = `
"import { NgModule } from '@angular-classic/core';
import { TestPipe } from './my-pipes/test/test.pipe';
@NgModule({
  imports: [],
  declarations: [TestPipe],
  exports: [TestPipe],
})
export class TestModule {}
"
`;

exports[`pipe generator should generate a pipe with test files and attach to the NgModule automatically 1`] = `
"import { Pipe, PipeTransform } from '@angular-classic/core';

@Pipe({
  name: 'test',
})
export class TestPipe implements PipeTransform {
  transform(value: unknown, ...args: unknown[]): unknown {
    return null;
  }
}
"
`;

exports[`pipe generator should generate a pipe with test files and attach to the NgModule automatically 2`] = `
"import { TestPipe } from './test.pipe';

describe('TestPipe', () => {
  it('create an instance', () => {
    const pipe = new TestPipe();
    expect(pipe).toBeTruthy();
  });
});
"
`;

exports[`pipe generator should generate a pipe with test files and attach to the NgModule automatically 3`] = `
"import { NgModule } from '@angular-classic/core';
import { TestPipe } from './test.pipe';
@NgModule({
  imports: [],
  declarations: [TestPipe],
  exports: [],
})
export class TestModule {}
"
`;

exports[`pipe generator should import the pipe correctly when flat=false 1`] = `
"import { Pipe, PipeTransform } from '@angular-classic/core';

@Pipe({
  name: 'test',
})
export class TestPipe implements PipeTransform {
  transform(value: unknown, ...args: unknown[]): unknown {
    return null;
  }
}
"
`;

exports[`pipe generator should import the pipe correctly when flat=false 2`] = `
"import { TestPipe } from './test.pipe';

describe('TestPipe', () => {
  it('create an instance', () => {
    const pipe = new TestPipe();
    expect(pipe).toBeTruthy();
  });
});
"
`;

exports[`pipe generator should import the pipe correctly when flat=false 3`] = `
"import { NgModule } from '@angular-classic/core';
import { TestPipe } from './test/test.pipe';
@NgModule({
  imports: [],
  declarations: [TestPipe],
  exports: [],
})
export class TestModule {}
"
`;

exports[`pipe generator should import the pipe correctly when flat=false and path is nested deeper 1`] = `
"import { Pipe, PipeTransform } from '@angular-classic/core';

@Pipe({
  name: 'test',
})
export class TestPipe implements PipeTransform {
  transform(value: unknown, ...args: unknown[]): unknown {
    return null;
  }
}
"
`;

exports[`pipe generator should import the pipe correctly when flat=false and path is nested deeper 2`] = `
"import { TestPipe } from './test.pipe';

describe('TestPipe', () => {
  it('create an instance', () => {
    const pipe = new TestPipe();
    expect(pipe).toBeTruthy();
  });
});
"
`;

exports[`pipe generator should import the pipe correctly when flat=false and path is nested deeper 3`] = `
"import { NgModule } from '@angular-classic/core';
import { TestPipe } from './my-pipes/test/test.pipe';
@NgModule({
  imports: [],
  declarations: [TestPipe],
  exports: [],
})
export class TestModule {}
"
`;

exports[`pipe generator should not generate test file when skipTests=true 1`] = `
"import { Pipe, PipeTransform } from '@angular-classic/core';

@Pipe({
  name: 'test',
})
export class TestPipe implements PipeTransform {
  transform(value: unknown, ...args: unknown[]): unknown {
    return null;
  }
}
"
`;

exports[`pipe generator should not generate test file when skipTests=true 2`] = `
"import { NgModule } from '@angular-classic/core';
import { TestPipe } from './my-pipes/test/test.pipe';
@NgModule({
  imports: [],
  declarations: [TestPipe],
  exports: [],
})
export class TestModule {}
"
`;

exports[`pipe generator should not import the pipe when skipImport=true 1`] = `
"import { Pipe, PipeTransform } from '@angular-classic/core';

@Pipe({
  name: 'test',
})
export class TestPipe implements PipeTransform {
  transform(value: unknown, ...args: unknown[]): unknown {
    return null;
  }
}
"
`;

exports[`pipe generator should not import the pipe when skipImport=true 2`] = `
"import { TestPipe } from './test.pipe';

describe('TestPipe', () => {
  it('create an instance', () => {
    const pipe = new TestPipe();
    expect(pipe).toBeTruthy();
  });
});
"
`;

exports[`pipe generator should not import the pipe when skipImport=true 3`] = `
"import { NgModule } from '@angular-classic/core';
@NgModule({
  imports: [],
  declarations: [],
  exports: [],
})
export class TestModule {}
"
`;

exports[`pipe generator should not import the pipe when standalone=true 1`] = `
"import { Pipe, PipeTransform } from '@angular-classic/core';

@Pipe({
  name: 'test',
  standalone: true,
})
export class TestPipe implements PipeTransform {
  transform(value: unknown, ...args: unknown[]): unknown {
    return null;
  }
}
"
`;

exports[`pipe generator should not import the pipe when standalone=true 2`] = `
"import { TestPipe } from './test.pipe';

describe('TestPipe', () => {
  it('create an instance', () => {
    const pipe = new TestPipe();
    expect(pipe).toBeTruthy();
  });
});
"
`;

exports[`pipe generator should not import the pipe when standalone=true 3`] = `
"import { NgModule } from '@angular-classic/core';
@NgModule({
  imports: [],
  declarations: [],
  exports: [],
})
export class TestModule {}
"
`;
